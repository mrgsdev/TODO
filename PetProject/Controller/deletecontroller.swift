//
//  deletecontroller.swift
//  PetProject
//
//  Created by MRGS on 14.08.2022.
//


import UIKit

class deletecontroller: UIViewController {
    weak var delegate:ToDoViewControllerDelegate?
    let txtfld = MainTaskCell()
    private let taskLabel: UILabel = {
        let label = UILabel()
        label.text = "Create new todo"
        if let customFont = UIFont(name: "Urbanist-SemiBold", size: 30) {
            let fontMetrics = UIFontMetrics(forTextStyle: .title1)
            label.font = fontMetrics.scaledFont(for: customFont)
        }
        label.backgroundColor = .blue
        label.adjustsFontForContentSizeCategory = true
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    private let tableView: UITableView = {
        let table = UITableView()
        table.register(MainTaskCell.self, forCellReuseIdentifier: "MainTaskCell")
        table.register(DetailTaskCell.self, forCellReuseIdentifier: "DetailTaskCell")
        table.separatorStyle = .none
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.delegate = self
        tableView.dataSource = self
        view.backgroundColor = .white
        clearBackgroundNavigationBar()
        navItemSetupButton()
        view.addSubview(taskLabel)
        view.addSubview(tableView)
        makeConstraints()
    }
    
    @objc private func saveButtonPressed(sender: UIButton){
     
        Vibration.light.vibrate()
        guard let textField = MainTaskCell.mainTextField.text,!textField.isEmpty else {
            // create the alert
            Vibration.error.vibrate()
            let alertController = AlertController()
            alertController.customAlert(text: "Ooops!!üòî", destText: "Please enter your task", isHiddenActionButton: true)
            alertController.modalPresentationStyle = UIModalPresentationStyle.overCurrentContext
            alertController.modalTransitionStyle = UIModalTransitionStyle.crossDissolve
            self.present(alertController, animated: true)
            return
        }
        delegate?.update(text: MainTaskCell.mainTextField.text!)//–ø—Ä–æ–±–ª–µ–º–∞!–ö–∞–∫ —Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –±–µ–∑ MainTaskCell
        MainTaskCell.mainTextField.text = nil
        navigationController?.popViewController(animated: true)
    }
    @objc private func popViewButtonPressed(){
        Vibration.light.vibrate()
        navigationController?.popViewController(animated: true)
    }
}
extension deletecontroller{
    
    private func navItemSetupButton()  {
        let navItem = navigationItem
        navItem.setHidesBackButton(true, animated: true)
        navItem.rightBarButtonItem = .addButton(systemNameIcon: imageSet.checkmark.rawValue, self, action: #selector(saveButtonPressed))
        navItem.leftBarButtonItem = .addButton(systemNameIcon: imageSet.backButton.rawValue, self, action: #selector(popViewButtonPressed))
    }
    
    private func makeConstraints()  {
        NSLayoutConstraint.activate([
            taskLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            taskLabel.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 20),
            taskLabel.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -20),
            
            tableView.topAnchor.constraint(equalTo: taskLabel.bottomAnchor),
            tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
            tableView.rightAnchor.constraint(equalTo: view.rightAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}
extension deletecontroller:UITableViewDataSource,UITableViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 2
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.row{
        case 0:
            return 109
        case 1:
            return 400
        default:
            return 0
        }
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: "MainTaskCell", for: indexPath) as! MainTaskCell
            //            cell.mainTextField.text = ""
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(withIdentifier: "DetailTaskCell", for: indexPath) as! DetailTaskCell
            cell.detailTextView.text = "–†–∞—Å—Å–∫–∞–∑ ‚Äî –º–µ–Ω—å—à–∞—è –ø–æ –æ–±—ä—ë–º—É —Ñ–æ—Ä–º–∞ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–∑—ã, –Ω–µ–∂–µ–ª–∏ –ø–æ–≤–µ—Å—Ç—å –∏–ª–∏ —Ä–æ–º–∞–Ω[1]. –ù–µ —Å–ª–µ–¥—É–µ—Ç –ø—É—Ç–∞—Ç—å –Ω–æ–≤–µ–ª–ª—É ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑[2], –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è —Å—Ç–∏–ª–µ–º –∏–∑–ª–æ–∂–µ–Ω–∏—è[3][4][5], —Å –µ—ë –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –æ–º–æ–Ω–∏–º–æ–º novella, —è–≤–ª—è—é—â–∏–º—Å—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è –ø–æ–≤–µ—Å—Ç—å[6][7].–†–∞—Å—Å–∫–∞–∑ –≤–æ—Å—Ö–æ–¥–∏—Ç –∫ —Ñ–æ–ª—å–∫–ª–æ—Ä–Ω—ã–º –∂–∞–Ω—Ä–∞–º —É—Å—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –≤ –≤–∏–¥–µ —Å–∫–∞–∑–∞–Ω–∏–π –∏–ª–∏ –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω–æ—Å–∫–∞–∑–∞–Ω–∏—è –∏ –ø—Ä–∏—Ç—á–∏[8][9]. –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ö –Ω–µ –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü –∏ –æ–¥–Ω–∞ —Å—é–∂–µ—Ç–Ω–∞—è –ª–∏–Ω–∏—è (—Ä–µ–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –ø—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–º –Ω–∞–ª–∏—á–∏–∏ –∫–∞–∫–æ–π-—Ç–æ –æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã."
            return cell
        default:
            fatalError("Failed to instantiate the table view cell fordetail view controller")
        }
    }
}

